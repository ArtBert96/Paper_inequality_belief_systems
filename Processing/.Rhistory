# mijs_nl3 = mijs_nl %>%
#   filter(treatment==3)
#loop each V and run t.test
tests_list <- lapply(seq_along(mijs_us0), function(i){
t.test(mijs_us0[[i]], mijs_us1[[i]])
})
means = sapply(tests_list, '[[', 'estimate')
dif_mean = means[1,] - means[2,]
pvalues = as.data.frame(sapply(tests_list, '[[', 'p.value'))
#print true when the means differ
pvalues = pvalues %>%
rename(pvalues = "sapply(tests_list, \"[[\", \"p.value\")") %>%
bind_cols(names(mijs_us0))
mult_test = 0.05/nrow(pvalues)
pvalues_us01 = pvalues %>%
rename(variable = "...2")  %>%
bind_cols(dif_mean) %>%
filter(pvalues<mult_test) %>%
rename(dif_mean = "...3") %>%
select(variable, dif_mean, pvalues)
#loop each V and run t.test
tests_list <- lapply(seq_along(mijs_us0), function(i){
t.test(mijs_us0[[i]], mijs_us2[[i]])
})
means = sapply(tests_list, '[[', 'estimate')
dif_mean = means[1,] - means[2,]
pvalues = as.data.frame(sapply(tests_list, '[[', 'p.value'))
#print true when the means differ
pvalues = pvalues %>%
rename(pvalues = "sapply(tests_list, \"[[\", \"p.value\")") %>%
bind_cols(names(mijs_us0))
mult_test = 0.05/nrow(pvalues)
pvalues_us02 = pvalues %>%
rename(variable = "...2")  %>%
bind_cols(dif_mean) %>%
filter(pvalues<mult_test) %>%
rename(dif_mean = "...3") %>%
select(variable, dif_mean, pvalues)
#loop each V and run t.test
tests_list <- lapply(seq_along(mijs_us0), function(i){
t.test(mijs_us0[[i]], mijs_us3[[i]])
})
means = sapply(tests_list, '[[', 'estimate')
dif_mean = means[1,] - means[2,]
pvalues = as.data.frame(sapply(tests_list, '[[', 'p.value'))
#print true when the means differ
pvalues = pvalues %>%
rename(pvalues = "sapply(tests_list, \"[[\", \"p.value\")") %>%
bind_cols(names(mijs_us0))
mult_test = 0.05/nrow(pvalues)
pvalues_us03 = pvalues %>%
rename(variable = "...2")  %>%
bind_cols(dif_mean) %>%
filter(pvalues<mult_test) %>%
rename(dif_mean = "...3") %>%
select(variable, dif_mean, pvalues)
#loop each V and run t.test
tests_list <- lapply(seq_along(mijs_us1), function(i){
t.test(mijs_us1[[i]], mijs_us2[[i]])
})
means = sapply(tests_list, '[[', 'estimate')
dif_mean = means[1,] - means[2,]
pvalues = as.data.frame(sapply(tests_list, '[[', 'p.value'))
#print true when the means differ
pvalues = pvalues %>%
rename(pvalues = "sapply(tests_list, \"[[\", \"p.value\")") %>%
bind_cols(names(mijs_us1))
mult_test = 0.05/nrow(pvalues)
pvalues_us12 = pvalues %>%
rename(variable = "...2")  %>%
bind_cols(dif_mean) %>%
filter(pvalues<mult_test) %>%
rename(dif_mean = "...3") %>%
select(variable, dif_mean, pvalues)
#loop each V and run t.test
tests_list <- lapply(seq_along(mijs_us2), function(i){
t.test(mijs_us2[[i]], mijs_us3[[i]])
})
means = sapply(tests_list, '[[', 'estimate')
dif_mean = means[1,] - means[2,]
pvalues = as.data.frame(sapply(tests_list, '[[', 'p.value'))
#print true when the means differ
pvalues = pvalues %>%
rename(pvalues = "sapply(tests_list, \"[[\", \"p.value\")") %>%
bind_cols(names(mijs_us2))
mult_test = 0.05/nrow(pvalues)
pvalues_us23 = pvalues %>%
rename(variable = "...2")  %>%
bind_cols(dif_mean) %>%
filter(pvalues<mult_test) %>%
rename(dif_mean = "...3") %>%
select(variable, dif_mean, pvalues)
#loop each V and run t.test
tests_list <- lapply(seq_along(mijs_us1), function(i){
t.test(mijs_us1[[i]], mijs_us3[[i]])
})
means = sapply(tests_list, '[[', 'estimate')
dif_mean = means[1,] - means[2,]
pvalues = as.data.frame(sapply(tests_list, '[[', 'p.value'))
#print true when the means differ
pvalues = pvalues %>%
rename(pvalues = "sapply(tests_list, \"[[\", \"p.value\")") %>%
bind_cols(names(mijs_us1))
mult_test = 0.05/nrow(pvalues)
pvalues_us13 = pvalues %>%
rename(variable = "...2")  %>%
bind_cols(dif_mean) %>%
filter(pvalues<mult_test) %>%
rename(dif_mean = "...3") %>%
select(variable, dif_mean, pvalues)
pvalues_us01
pvalues_us02
pvalues_us03
pvalues_us12
pvalues_us13
pvalues_us23
#loop each V and run t.test
tests_list <- lapply(seq_along(mijs_nl0), function(i){
t.test(mijs_nl0[[i]], mijs_nl1[[i]])
})
means = sapply(tests_list, '[[', 'estimate')
dif_mean = means[1,] - means[2,]
pvalues = as.data.frame(sapply(tests_list, '[[', 'p.value'))
#print true when the means differ
pvalues = pvalues %>%
rename(pvalues = "sapply(tests_list, \"[[\", \"p.value\")") %>%
bind_cols(names(mijs_nl0))
mult_test = 0.05/nrow(pvalues)
pvalues_nl01 = pvalues %>%
rename(variable = "...2")  %>%
bind_cols(dif_mean) %>%
filter(pvalues<mult_test) %>%
rename(dif_mean = "...3") %>%
select(variable, dif_mean, pvalues)
#loop each V and run t.test
tests_list <- lapply(seq_along(mijs_nl0), function(i){
t.test(mijs_nl0[[i]], mijs_nl2[[i]])
})
means = sapply(tests_list, '[[', 'estimate')
dif_mean = means[1,] - means[2,]
pvalues = as.data.frame(sapply(tests_list, '[[', 'p.value'))
#print true when the means differ
pvalues = pvalues %>%
rename(pvalues = "sapply(tests_list, \"[[\", \"p.value\")") %>%
bind_cols(names(mijs_nl0))
mult_test = 0.05/nrow(pvalues)
pvalues_nl02 = pvalues %>%
rename(variable = "...2")  %>%
bind_cols(dif_mean) %>%
filter(pvalues<mult_test) %>%
rename(dif_mean = "...3") %>%
select(variable, dif_mean, pvalues)
#loop each V and run t.test
tests_list <- lapply(seq_along(mijs_nl1), function(i){
t.test(mijs_nl1[[i]], mijs_nl2[[i]])
})
means = sapply(tests_list, '[[', 'estimate')
dif_mean = means[1,] - means[2,]
pvalues = as.data.frame(sapply(tests_list, '[[', 'p.value'))
#print true when the means differ
pvalues = pvalues %>%
rename(pvalues = "sapply(tests_list, \"[[\", \"p.value\")") %>%
bind_cols(names(mijs_nl1))
mult_test = 0.05/nrow(pvalues)
pvalues_nl12 = pvalues %>%
rename(variable = "...2")  %>%
bind_cols(dif_mean) %>%
filter(pvalues<mult_test) %>%
rename(dif_mean = "...3") %>%
select(variable, dif_mean, pvalues)
pvalues_nl01
pvalues_nl02
pvalues_nl12
#US
mijs_us_skim  = mijs_us %>%
mutate_if(is.character, as.numeric) %>%
mutate_if(is.factor, as.numeric) %>%
as.data.frame() %>%
stargazer(type = "text")
#NL
mijs_nl_skim  = mijs_nl %>%
mutate_if(is.character, as.numeric) %>%
mutate_if(is.factor, as.numeric) %>%
as.data.frame() %>%
stargazer(type = "text")
??get_label
p_load(tidyverse, janitor, here, haven, labelled, sjmisc, skimr,
stargazer, purr, conflicted, biclust, corclass, poLCA, sjlabelled)
labels_data = as.data.frame(get_label(mijs_us)) %>%
rownames_to_column(var = "variable") %>%
colnames<-(c("variable", "label"))
#Libraries
library(pacman)
p_load(tidyverse, janitor, here, haven, labelled, sjmisc, skimr,
stargazer, purr, conflicted, biclust, corclass, poLCA, sjlabelled)
View(mijs_us)
View(mijs_us)
conflict_prefer("get_label", "sjlabelled")
save(mijs_us, US_ega_CCA1, US_ega_CCA2, LCA_US_7, CCA_group_US,
mijs_nl, NL_ega_CCA1, NL_ega_CCA2, LCA_NL_6, CCA_group_NL,
file = here("Output",  "230314 - Output.RData"))
#Libraries
library(pacman)
p_load(tidyverse, janitor, here, haven, labelled, sjmisc, skimr,
stargazer, purr, conflicted, biclust, corclass, poLCA, sjlabelled)
conflict_prefer("get_label", "sjlabelled")
labels_data = as.data.frame(get_label(mijs_us)) %>%
rownames_to_column(var = "variable") %>%
colnames<-(c("variable", "label"))
??get_label
#Libraries
library(pacman)
p_load(tidyverse, janitor, here, haven, labelled, sjmisc, skimr,
stargazer, purr, conflicted, biclust, corclass, poLCA, sjlabelled)
conflicted::conflicts_prefer(sjmisc::to_character)
conflicted::conflicts_prefer(sjmisc::to_character)
labels_data = as.data.frame(get_label(mijs_us)) %>%
rownames_to_column(var = "variable") %>%
colnames<-(c("variable", "label"))
labels_data = as.data.frame(sjlabelled::get_label(mijs_us)) %>%
rownames_to_column(var = "variable") %>%
colnames<-(c("variable", "label"))
knitr::opts_chunk$set(echo = TRUE)
library(pacman)
p_load(tidyverse, janitor, here, haven, labelled, sjmisc, skimr, ggplot2, jtools,
stargazer, qgraph, Matrix, igraph, NetworkComparisonTest, bootnet,
rio, foreign, matrixcalc, corclass, NetworkComparisonTest, conflicted,
EGAnet, texreg, ggpubr, lavaan, ltm, kableExtra, sjPlot)
#Packages conflicts
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
conflict_prefer("igraph", "compose")
options(max.print=999999)
options(scipen=999)
#Load
rm(list = ls())
load(here("Output",  "230515 - Data_Databases.RData"))
data_us_skim  = data_us %>%
select(starts_with("p_"),
starts_with("b_"),
starts_with("ib_"),
starts_with("att_"),
agegroups, sex, race, education, working, assets,
hhincome_groups, immigrant, marital, religion) %>%
mutate_if(is.character, as.numeric) %>%
mutate_if(is.factor, as.numeric) %>%
as.data.frame() %>%
stargazer(type = "html",
out = here("Output","Article","Tables", "Descriptives_us.html"))
data_nl_skim  = data_nl %>%
select(starts_with("p_"),
starts_with("b_"),
starts_with("ib_"),
starts_with("att_"),
agegroups, sex, race, education, working, assets,
hhincome_groups, immigrant, marital, religion) %>%
mutate_if(is.character, as.numeric) %>%
mutate_if(is.factor, as.numeric) %>%
as.data.frame() %>%
stargazer(type = "html",
out = here("Output","Article","Tables", "Descriptives_nl.html"))
#CCA applied to ISSP US
cca_group_us <- cca(data_us_cca, filter.significance = TRUE, filter.value = 0.01,
zero.action = c("ownclass"))
#Preliminary plots
us_plot_cca_1 = plot(cca_group_us, 1)
us_plot_cca_3 = plot(cca_group_us, 3)
#Add membership to US
data_us_cca$cca = cca_group_us$membership
data_us$cca = cca_group_us$membership
#Prepare CCA-driven dataframe for EGA
cca_us_1 = data_us_cca %>%
as.data.frame() %>%
filter(cca == 1) %>%
select(p_income:ib_sex)
cca_us_0 = data_us_cca %>%
as.data.frame() %>%
filter(cca == 3) %>%
select(p_income:ib_sex)
#Filter out second CCA class
data_us_cca = data_us_cca %>%
filter(cca != 2)
#Rename CCA groups
data_us = data_us %>%
mutate(cca = ifelse(cca=="1", 1, 0))
data_us_cca = data_us_cca %>%
mutate(cca = ifelse(cca=="1", 1, 0))
#CCA applied to ISSP NL
cca_group_nl <- cca(data_nl_cca, filter.significance = TRUE, filter.value = 0.01,
zero.action = c("ownclass"))
#Preliminary plots
nl_plot_cca_1 = plot(cca_group_nl, 1)
nl_plot_cca_3 = plot(cca_group_nl, 3)
#Add membership to NL
data_nl_cca$cca = cca_group_nl$membership
data_nl$cca = cca_group_nl$membership
#Prepare CCA-driven dataframe for EGA
cca_nl_1 = data_nl_cca %>%
as.data.frame() %>%
filter(cca == 1) %>%
select(p_income:ib_sex)
cca_nl_0 = data_nl_cca %>%
as.data.frame() %>%
filter(cca == 3) %>%
select(p_income:ib_sex)
#Filter out second CCA class
data_nl_cca = data_nl_cca %>%
filter(cca != 2)
#Rename CCA groups
data_nl = data_nl %>%
mutate(cca = ifelse(cca=="1", 0, 1))
data_nl_cca = data_nl_cca %>%
mutate(cca = ifelse(cca=="1", 0, 1))
#EGA databases
us_cca0_ega = data_us_cca %>%
filter(cca == 0) %>%
select(p_income:ib_sex)
us_cca1_ega = data_us_cca %>%
filter(cca == 1) %>%
select(p_income:ib_sex)
#EGA
ega_us0 <- EGA(data=us_cca0_ega,  model = "glasso",
plot.EGA = TRUE,
plot.args = list(
plot.type = "qgraph",
vsize = 15,
alpha = 0.8,
legend.position = "none", legend.size = NA,
edge.color = c("royalblue", "tomato")))
ega_us1 <- EGA(data=us_cca1_ega,  model = "glasso",
plot.EGA = TRUE,
plot.args = list(
plot.type = "qgraph",
vsize = 15,
alpha = 0.8,
legend.position = "none", legend.size = NA,
edge.color = c("royalblue", "tomato")))
#EGA databases
nl_cca0_ega = data_nl_cca %>%
filter(cca == 0) %>%
select(p_income:ib_sex)
nl_cca1_ega = data_nl_cca %>%
filter(cca == 1) %>%
select(p_income:ib_sex)
#EGA
ega_nl0 <- EGA(data=nl_cca0_ega,  model = "glasso",
plot.EGA = TRUE,
plot.args = list(
plot.type = "qgraph",
vsize = 15,
alpha = 0.8,
legend.position = "none", legend.size = NA,
edge.color = c("royalblue", "tomato")))
ega_nl1 <- EGA(data=nl_cca1_ega,  model = "glasso",
plot.EGA = TRUE,
plot.args = list(
plot.type = "qgraph",
vsize = 15,
alpha = 0.8,
legend.position = "none", legend.size = NA,
edge.color = c("royalblue", "tomato")))
#EGA list
list_data_egas <- lapply(ls(pattern="^ega_"), function(x) get(x))
list_data_egas <- list_data_egas[c(3,4,1,2)]
cca_groups = c("US_0", "US_1", "NL_0", "NL_1")
#Compare EGAs
comp_egas = compare.EGA.plots(
input.list = list_data_egas,
base.plot = 1,
labels = cca_groups,
rows = 2, columns = 2,
plot.args = list(
plot.type = "qgraph",
vsize = 15,
alpha = 0.8,
legend.position = "none", legend.size = NA,
edge.color = c("royalblue", "tomato"),
plot.margin = margin(6,6,6,6, "mm")))
#Individual plots
plot_ega_us_0 = comp_egas$individual.plots$`US_0` +
ggtitle("US 0") +
theme(plot.title = element_text(size=20, face="bold", hjust = 0.5),
plot.margin = margin(2,2,2,2, "mm"))
ggsave(here("Output", "Supplemental", "ega_us0.jpg"),
plot_ega_us_0, height = 6, width = 6)
plot_ega_us_1 = comp_egas$individual.plots$`US_1` +
ggtitle("US 1") +
theme(plot.title = element_text(size=20, face="bold", hjust = 0.5),
plot.margin = margin(2,2,2,2, "mm"))
ggsave(here("Output", "Supplemental", "ega_us1.jpg"),
plot_ega_us_1, height = 6, width = 6)
plot_ega_nl_0 = comp_egas$individual.plots$`NL_0` +
ggtitle("NL 0") +
theme(plot.title = element_text(size=20, face="bold", hjust = 0.5),
plot.margin = margin(2,2,2,2, "mm"))
ggsave(here("Output", "Supplemental", "ega_nl0.jpg"),
plot_ega_nl_0, height = 6, width = 6)
plot_ega_nl_1 = comp_egas$individual.plots$`NL_1` +
ggtitle("NL 1") +
theme(plot.title = element_text(size=20, face="bold", hjust = 0.5),
plot.margin = margin(2,2,2,2, "mm"))
ggsave(here("Output", "Supplemental", "ega_nl1.jpg"),
plot_ega_nl_1, height = 6, width = 6)
#Full plot
comp_egas_full = comp_egas$comparison.plot
plot_egas <- lapply(ls(pattern="^plot_ega_"), function(x) get(x))
plot_egas <- plot_egas[c(3,4,1,2)]
g_plot_egas = ggarrange(plotlist = plot_egas, ncol = 2, nrow = 2)
#Save
ggsave(here("Output", "Article", "Graphs", "ega_full.jpg"),
g_plot_egas, height = 12, width = 12)
#US
set.seed(1)
nct_us = NCT(cca_us_0, cca_us_1,
gamma = 0.5, test.edges = TRUE, edges = "all",
test.centrality = TRUE, centrality = "strength")
inputNCTgraph <- ega_us0$network - ega_us1$network
inputNCTgraph[upper.tri(inputNCTgraph)][which(nct_us$einv.pvals$`p-value` >= .05)] <- 0
inputNCTgraph <- forceSymmetric(inputNCTgraph)
pdf(here("Output", "Supplemental", "nct_us.pdf"))
qgraph(inputNCTgraph,
#layout = "spring",
edge.labels = TRUE, esize = 1)
dev.off()
#NL
set.seed(1)
nct_nl = NCT(cca_nl_0, cca_nl_1,
gamma = 0.5, test.edges = TRUE, edges = "all",
test.centrality = TRUE, centrality = "strength")
inputNCTgraph <- ega_nl0$network - ega_nl1$network
inputNCTgraph[upper.tri(inputNCTgraph)][which(nct_nl$einv.pvals$`p-value` >= .05)] <- 0
inputNCTgraph <- forceSymmetric(inputNCTgraph)
pdf(here("Output", "Supplemental", "nct_nl.pdf"))
qgraph(inputNCTgraph,
#layout = "spring",
edge.labels = TRUE, esize = 1)
dev.off()
#Regressions
m1_us = glm(cca ~ politics, data = data_us, family=binomial(link="logit"))
m2_us = glm(cca ~ politics + agegroups + sex + race + education + working + assets +
hhincome_groups + immigrant + marital + religion, data = data_us, family=binomial(link="logit"))
m3_us = glm(cca ~ agegroups + sex + race + education + working + assets +
hhincome_groups + immigrant + marital + religion, data = data_us, family=binomial(link="logit"))
#Regressions
m1_nl = glm(cca ~ politics, data = data_nl, family=binomial(link="logit"))
m2_nl = glm(cca ~ politics + agegroups + sex + race + education + working + assets +
hhincome_groups + immigrant + marital + religion, data = data_nl, family=binomial(link="logit"))
m3_nl = glm(cca ~ agegroups + sex + race + education + working + assets +
hhincome_groups + immigrant + marital + religion, data = data_nl, family=binomial(link="logit"))
#Output
tab_model(list(m1_us, m2_us, m3_us, m1_nl, m2_nl, m3_nl),
show.p = TRUE,
p.style = "stars",
p.threshold = c(0.1, 0.05, 0.01),
dv.labels = c("M1-US", "M2-US", "M3-US", "M1-NL", "M2-NL", "M3-NL"),
collapse.ci = TRUE,
show.aic = TRUE,
#show.reflvl = TRUE,
title = "Table. Logistic regression models on inequality belief membership - US & NL",
string.pred = " ",
auto.label = FALSE,
file = here("Output", "Article", "Tables", "Sociodemographic_Determinants.html")
)
??tab_model
library(pacman)
p_load(tidyverse, janitor, here, haven, labelled, sjmisc, skimr, ggplot2, jtools,
stargazer, qgraph, Matrix, igraph, NetworkComparisonTest, bootnet,
rio, foreign, matrixcalc, corclass, NetworkComparisonTest, conflicted,
EGAnet, texreg, ggpubr, lavaan, ltm, kableExtra, sjPlot)
#Output
tab_model(list(m1_us, m2_us, m3_us, m1_nl, m2_nl, m3_nl),
show.p = TRUE,
p.style = "stars",
p.threshold = c(0.1, 0.05, 0.01),
dv.labels = c("M1-US", "M2-US", "M3-US", "M1-NL", "M2-NL", "M3-NL"),
collapse.ci = TRUE,
show.aic = TRUE,
#show.reflvl = TRUE,
title = "Table. Logistic regression models on inequality belief membership - US & NL",
string.pred = " ",
auto.label = FALSE,
file = here("Output", "Article", "Tables", "Sociodemographic_Determinants.html")
)
#Output
sjPlot:tab_model(list(m1_us, m2_us, m3_us, m1_nl, m2_nl, m3_nl),
show.p = TRUE,
p.style = "stars",
p.threshold = c(0.1, 0.05, 0.01),
dv.labels = c("M1-US", "M2-US", "M3-US", "M1-NL", "M2-NL", "M3-NL"),
collapse.ci = TRUE,
show.aic = TRUE,
#show.reflvl = TRUE,
title = "Table. Logistic regression models on inequality belief membership - US & NL",
string.pred = " ",
auto.label = FALSE,
file = here("Output", "Article", "Tables", "Sociodemographic_Determinants.html")
)
#Output
sjPlot::tab_model(list(m1_us, m2_us, m3_us, m1_nl, m2_nl, m3_nl),
show.p = TRUE,
p.style = "stars",
p.threshold = c(0.1, 0.05, 0.01),
dv.labels = c("M1-US", "M2-US", "M3-US", "M1-NL", "M2-NL", "M3-NL"),
collapse.ci = TRUE,
show.aic = TRUE,
#show.reflvl = TRUE,
title = "Table. Logistic regression models on inequality belief membership - US & NL",
string.pred = " ",
auto.label = FALSE,
file = here("Output", "Article", "Tables", "Sociodemographic_Determinants.html")
)
