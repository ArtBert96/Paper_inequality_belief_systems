list_data_egas <- lapply(ls(pattern="^ega_"), function(x) get(x))
list_data_egas <- list_data_egas[c(3,4,1,2)]
cca_groups = c("US_0", "US_1", "NL_0", "NL_1")
#Compare EGAs
comp_egas = compare.EGA.plots(
input.list = list_data_egas,
base.plot = 1,
labels = cca_groups,
rows = 2, columns = 2,
plot.args = list(
plot.type = "qgraph",
vsize = 15,
alpha = 0.8,
legend.position = "none", legend.size = NA,
edge.color = c("royalblue", "tomato"),
plot.margin = margin(6,6,6,6, "mm")))
#Individual plots
plot_ega_us_0 = comp_egas$individual.plots$`US_0` +
ggtitle("US 0") +
theme(plot.title = element_text(size=20, face="bold", hjust = 0.5),
plot.margin = margin(2,2,2,2, "mm"))
ggsave(here("Output", "Supplemental", "ega_us0.jpg"),
plot_ega_us_0, height = 6, width = 6)
plot_ega_us_1 = comp_egas$individual.plots$`US_1` +
ggtitle("US 1") +
theme(plot.title = element_text(size=20, face="bold", hjust = 0.5),
plot.margin = margin(2,2,2,2, "mm"))
ggsave(here("Output", "Supplemental", "ega_us1.jpg"),
plot_ega_us_1, height = 6, width = 6)
plot_ega_nl_0 = comp_egas$individual.plots$`NL_0` +
ggtitle("NL 0") +
theme(plot.title = element_text(size=20, face="bold", hjust = 0.5),
plot.margin = margin(2,2,2,2, "mm"))
ggsave(here("Output", "Supplemental", "ega_nl0.jpg"),
plot_ega_nl_0, height = 6, width = 6)
plot_ega_nl_1 = comp_egas$individual.plots$`NL_1` +
ggtitle("NL 1") +
theme(plot.title = element_text(size=20, face="bold", hjust = 0.5),
plot.margin = margin(2,2,2,2, "mm"))
ggsave(here("Output", "Supplemental", "ega_nl1.jpg"),
plot_ega_nl_1, height = 6, width = 6)
#Full plot
comp_egas_full = comp_egas$comparison.plot
plot_egas <- lapply(ls(pattern="^plot_ega_"), function(x) get(x))
plot_egas <- plot_egas[c(3,4,1,2)]
g_plot_egas = ggarrange(plotlist = plot_egas, ncol = 2, nrow = 2)
#Save
ggsave(here("Output", "Article", "Graphs", "ega_full.jpg"),
g_plot_egas, height = 12, width = 12)
plot_ega_us_0
plot_ega_us_1
plot_ega_nl_0
plot_ega_nl_1
cor_m_us_0
cor_m_us_1
cor_m_nl_0
cor_m_nl_1
# Indexes according to EGA by CCA group
cca_us_0_index = cca_us_0 %>%
mutate(perception_belief = rowMeans(across(c(p_income, p_wealth, p_poor, p_black, b_diversity, b_equality))),
individualist = rowMeans(across(c(b_merit, ib_weafam, ib_edu, ib_edupar, ib_work, ib_people))),
structuralist = rowMeans(across(c(ib_race, ib_migra, ib_relig, ib_sex)))) %>%
select(perception_belief, individualist, structuralist)
cca_us_1_index = cca_us_1 %>%
mutate(perception_belief = rowMeans(across(c(p_income, p_wealth, p_poor, p_black, b_diversity, b_equality,
b_merit))),
individualist = rowMeans(across(c(ib_edu, ib_edupar, ib_work))),
structuralist = rowMeans(across(c(ib_race, ib_migra, ib_relig, ib_sex, ib_people, ib_weafam)))) %>%
select(perception_belief, individualist, structuralist)
#Cor matrix
corr_us_0_index <- round(cor(cca_us_0_index), 1)
corr_us_1_index <- round(cor(cca_us_1_index), 1)
# Compute a matrix of correlation p-values
p.mat_us_0_index <- cor_pmat(cca_us_0_index)
p.mat_us_1_index <- cor_pmat(cca_us_1_index)
# Visualization
cor_mi_us_0 = ggcorrplot(corr_us_0_index, type = "lower",
outline.col = "white")
cor_mi_us_1 = ggcorrplot(corr_us_1_index, type = "lower",
outline.col = "white")
cor_mi_us_0
cor_mi_us_1
# Indexes according to EGA by CCA group
cca_nl_0_index = cca_nl_0 %>%
mutate(perception_belief = rowMeans(across(c(p_income, p_wealth, p_poor, p_black, b_diversity, b_equality))),
individualist = rowMeans(across(c(b_merit, ib_weafam, ib_edu, ib_edupar, ib_work, ib_people))),
structuralist = rowMeans(across(c(ib_race, ib_migra, ib_relig, ib_sex)))) %>%
select(perception_belief, individualist, structuralist)
cca_nl_1_index = cca_nl_1 %>%
mutate(perception_belief = rowMeans(across(c(p_income, p_wealth, p_poor, p_black, b_diversity, b_equality,
b_merit))),
individualist = rowMeans(across(c(ib_edu, ib_edupar, ib_work))),
structuralist = rowMeans(across(c(ib_race, ib_migra, ib_relig, ib_sex, ib_people, ib_weafam)))) %>%
select(perception_belief, individualist, structuralist)
#Cor matrix
corr_nl_0_index <- round(cor(cca_nl_0_index), 1)
corr_nl_1_index <- round(cor(cca_nl_1_index), 1)
# Compute a matrix of correlation p-values
p.mat_nl_0_index <- cor_pmat(cca_nl_0_index)
p.mat_nl_1_index <- cor_pmat(cca_nl_1_index)
# Visualization
cor_mi_nl_0 = ggcorrplot(corr_nl_0_index, hc.order = TRUE, type = "lower",
outline.col = "white")
cor_mi_nl_1 = ggcorrplot(corr_nl_1_index, hc.order = TRUE, type = "lower",
outline.col = "white")
cor_mi_nl_0
cor_mi_nl_1
#Centrality
centralitynl0 = centrality(ega_nl0$network)
centralitynl1 = centrality(ega_nl1$network)
centralityPlot(GGM = list(NL0 = ega_nl0$network, NL1 = ega_nl1$network), standardized = FALSE, orderBy = "Strength")
# Centralization
centralizationnl0 = centralize(centralitynl0$OutDegree, theoretical.max = 0, normalized = FALSE)
centralizationnl1 = centralize(centralitynl1$OutDegree, theoretical.max = 0, normalized = FALSE)
#Centrality
centralityus0 = centrality(ega_us0$network)
centralityus1 = centrality(ega_us1$network)
centralityPlot(GGM = list(US0 = ega_us0$network, US1 = ega_us1$network), standardized = FALSE, orderBy = "Strength")
# Centralization
centralizationus0 = centralize(centralityus0$OutDegree, theoretical.max = 0, normalized = FALSE)
centralizationus1 = centralize(centralityus1$OutDegree, theoretical.max = 0, normalized = FALSE)
#us1 is more centralized
#US
set.seed(1)
nct_us = NCT(cca_us_0, cca_us_1,
gamma = 0.5, test.edges = TRUE, edges = "all",
test.centrality = TRUE, centrality = "strength")
inputNCTgraph <- ega_us0$network - ega_us1$network
inputNCTgraph[upper.tri(inputNCTgraph)][which(nct_us$einv.pvals$`p-value` >= .05)] <- 0
inputNCTgraph <- forceSymmetric(inputNCTgraph)
nct_us_plot = qgraph(inputNCTgraph,
#layout = "spring",
edge.labels = TRUE)
pdf(here("Output", "Supplemental", "nct_us.pdf"))
nct_us_plot
dev.off()
#NL
set.seed(1)
nct_nl = NCT(cca_nl_0, cca_nl_1,
gamma = 0.5, test.edges = TRUE, edges = "all",
test.centrality = TRUE, centrality = "strength")
inputNCTgraph <- ega_nl0$network - ega_nl1$network
inputNCTgraph[upper.tri(inputNCTgraph)][which(nct_nl$einv.pvals$`p-value` >= .05)] <- 0
inputNCTgraph <- forceSymmetric(inputNCTgraph)
nct_nl_plot = qgraph(inputNCTgraph,
#layout = "spring",
edge.labels = TRUE)
pdf(here("Output", "Supplemental", "nct_nl.pdf"))
nct_nl_plot
dev.off()
plot(nct_us_plot)
plot(nct_nl_plot)
#Categorical variables
data_us = data_us %>%
mutate(working = ifelse(working==1, "Yes", "No"),
immigrant = ifelse(immigrant==1, "Yes", "No"),
marital = ifelse(marital==1, "Yes", "No"))
#Regressions
m1_us_a = glm(cca ~ politics, data = data_us, family=binomial(link="logit"))
m2_us_a = glm(cca ~ politics + agegroups + sex + race + education + working + assets +
hhincome_groups + immigrant + marital + religion, data = data_us, family=binomial(link="logit"))
m3_us_a = glm(cca ~ agegroups + sex + race + education + working + assets +
hhincome_groups + immigrant + marital + religion, data = data_us, family=binomial(link="logit"))
#Categorical variables
data_nl = data_nl %>%
mutate(working = ifelse(working==1, "Yes", "No"),
immigrant = ifelse(immigrant==1, "Yes", "No"),
marital = ifelse(marital==1, "Yes", "No"))
#Regressions
m1_nl_a = glm(cca ~ politics, data = data_nl, family=binomial(link="logit"))
m2_nl_a = glm(cca ~ politics + agegroups + sex + race + education + working + assets +
hhincome_groups + immigrant + marital + religion, data = data_nl, family=binomial(link="logit"))
m3_nl_a = glm(cca ~ agegroups + sex + race + education + working + assets +
hhincome_groups + immigrant + marital + religion, data = data_nl, family=binomial(link="logit"))
#Output
tab_model(list(m1_us_a, m2_us_a, m3_us_a, m1_nl_a, m2_nl_a, m3_nl_a),
show.p = TRUE,
p.style = "stars",
p.threshold = c(0.1, 0.05, 0.01),
dv.labels = c("M1-US", "M2-US", "M3-US", "M1-NL", "M2-NL", "M3-NL"),
collapse.ci = TRUE,
show.aic = TRUE,
#show.reflvl = TRUE,
title = "Table. Logistic regression models on inequality belief membership - US 1 & NL 1",
string.pred = " ",
auto.label = FALSE,
file = here("Output", "Article", "Tables", "Sociodemographic_Determinants.html")
)
#Output reduced
tab_model(list(m2_us_a, m2_nl_a),
show.p = TRUE,
p.style = "stars",
p.threshold = c(0.1, 0.05, 0.01),
dv.labels = c("US", "NL"),
collapse.ci = TRUE,
show.aic = TRUE,
#show.reflvl = TRUE,
title = "Table. Logistic regression models on inequality belief membership - US 1 & NL 1",
string.pred = " ",
auto.label = FALSE,
file = here("Output", "Article", "Tables", "Sociodemographic_Determinants_Reduced.html")
)
ggpredict(m2_us_a)
ggpredict(m2_nl_a)
#cross tab
data_us %>%
select(cca, att_redist) %>%
flat_table(margin = "row", digits = 1)
#graph
data_us_n = nrow(data_us)
crosstab_us = data_us %>%
group_by(cca) %>%
mutate(n_cca = n()) %>%
group_by(cca, att_redist) %>%
summarise(count = n(),
pct = count / n_cca) %>%
slice(1) %>%
ggplot(aes(y=pct, x=att_redist)) +
geom_col() +
facet_wrap(~cca) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
scale_x_continuous(breaks = 1:7) +
labs(x="Attitude towards redistribution", y="Percentage")
# ggsave(filename = here("Output", "Article", "Graphs", "Bar_Graph_Att_Redistribution_US.jpg"), plot =  crosstab_us)
# crosstab_us
#cross tab
data_nl %>%
select(cca, att_redist) %>%
flat_table(margin = "row", digits = 1)
#graph
data_nl_n = nrow(data_nl)
crosstab_nl = data_nl %>%
group_by(cca) %>%
mutate(n_cca = n()) %>%
group_by(cca, att_redist) %>%
summarise(count = n(),
pct = count / n_cca) %>%
slice(1) %>%
ggplot(aes(y=pct, x=att_redist)) +
geom_col() +
facet_wrap(~cca) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
scale_x_continuous(breaks = 1:7) +
labs(x="Attitude towards redistribution", y="Percentage")
# ggsave(filename = here("Output", "Article", "Graphs", "Bar_Graph_Att_Redistribution_NL.jpg"), plot =  crosstab_nl)
# crosstab_nl
#Full database
data_us_nl = data_us %>%
bind_rows(data_nl) %>%
mutate(country_r = ifelse(country==1, "US", "NL"),
cca_full = paste0(country_r, " ", cca))
#Table
data_us_nl %>%
select(cca_full, att_redist) %>%
flat_table(margin = "row", digits = 1)
#Graph
data_crosstab_us_nl = data_us_nl %>%
group_by(cca_full) %>%
mutate(n_cca = n()) %>%
ungroup() %>%
group_by(cca_full, att_redist) %>%
summarise(count = n(),
pct = count / n_cca) %>%
slice(1)
data_crosstab_us_nl$cca_full <- factor(data_crosstab_us_nl$cca_full,
levels = c("US 0", "US 1", "NL 0", "NL 1"))
crosstab_us_nl = data_crosstab_us_nl %>%
ggplot(aes(y=pct, x=att_redist)) +
geom_col() +
facet_wrap(~cca_full) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1),
limits = c(0,0.5)) +
scale_x_continuous(breaks = 1:7) +
labs(x="Attitude towards redistribution", y="Percentage") +
theme_nice()
ggsave(filename = here("Output", "Article", "Graphs", "redist_full.jpg"),
plot =  crosstab_us_nl)
frq(data_us, cca)
frq(data_nl, cca)
data_us_nl %>%
group_by(cca_full) %>%
summarise(mean_justicia_ingreso = mean(att_redist))
#EGA US
data_us_net = data_us %>%
select(p_income:ib_sex)
US_ega = EGA(data=data_us_net,  model = "glasso",
plot.EGA = TRUE)
#EGA NL
data_nl_net = data_nl %>%
select(p_income:ib_sex)
NL_ega = EGA(data=data_nl_net,  model = "glasso",
plot.EGA = TRUE)
#CFA
data_cfa_us = CFA(US_ega, data_us_net, estimator = "WLSMV")
data_cfa_nl = CFA(NL_ega, data_nl_net, estimator = "WLSMV")
#Indexes
data_us = data_us %>%
mutate(index_1 = rowMeans(across(c(p_income, p_wealth, p_poor, p_black, b_diversity, b_equality))),
index_2 = rowMeans(across(c(b_merit, ib_weafam, ib_edu, ib_edupar, ib_work, ib_people))),
index_3 = rowMeans(across(c(ib_race, ib_migra, ib_relig, ib_sex))))
data_nl = data_nl %>%
mutate(index_1 = rowMeans(across(c(p_income, p_wealth, p_poor, p_black, b_merit, b_diversity, b_equality))),
index_2 = rowMeans(across(c(ib_weafam, ib_edu, ib_edupar, ib_work, ib_people))),
index_3 = rowMeans(across(c(ib_race, ib_migra, ib_relig, ib_sex))))
#Databases us
index_1_us = data_us %>%
select(p_income, p_wealth, p_poor, p_black, b_diversity, b_equality)
index_2_us = data_us %>%
select(b_merit, ib_weafam, ib_edu, ib_edupar, ib_work, ib_people)
index_3_us = data_us %>%
select(ib_race, ib_migra, ib_relig, ib_sex)
#Databases nl
index_1_nl = data_us %>%
select(p_income, p_wealth, p_poor, p_black, b_merit, b_diversity, b_equality)
index_2_nl = data_us %>%
select(ib_weafam, ib_edu, ib_edupar, ib_work, ib_people)
index_3_nl = data_us %>%
select(ib_race, ib_migra, ib_relig, ib_sex)
#Indexes
data_us = data_us %>%
mutate(index_1 = rowMeans(across(c(p_income, p_wealth, p_poor, p_black, b_diversity, b_equality))),
index_2 = rowMeans(across(c(b_merit, ib_weafam, ib_edu, ib_edupar, ib_work, ib_people))),
index_3 = rowMeans(across(c(ib_race, ib_migra, ib_relig, ib_sex))))
data_nl = data_nl %>%
mutate(index_1 = rowMeans(across(c(p_income, p_wealth, p_poor, p_black, b_merit, b_diversity, b_equality))),
index_2 = rowMeans(across(c(ib_weafam, ib_edu, ib_edupar, ib_work, ib_people))),
index_3 = rowMeans(across(c(ib_race, ib_migra, ib_relig, ib_sex))))
#Cronbach
cronbach.alpha(index_1_us, CI=TRUE, standardized=TRUE) # 0.858
cronbach.alpha(index_2_us, CI=TRUE, standardized=TRUE) # 0.456
cronbach.alpha(index_3_us, CI=TRUE, standardized=TRUE) # 0.735
cronbach.alpha(index_1_nl, CI=TRUE, standardized=TRUE) # 0.761
cronbach.alpha(index_2_nl, CI=TRUE, standardized=TRUE) # 0.512
cronbach.alpha(index_3_nl, CI=TRUE, standardized=TRUE) # 0.735
#US
m0_us_b = lm(att_redist ~ cca, data = data_us)
m1_us_b = lm(att_redist ~ index_1 + index_2 + index_3, data = data_us)
m2_us_b = lm(att_redist ~ index_1 + index_2 + index_3 + cca, data = data_us)
m3_us_b = lm(att_redist ~ index_1 + index_2 + index_3 + cca + agegroups + sex + race + education + working + politics +
hhincome_groups + immigrant + marital + religion, data = data_us)
#NL
m0_nl_b = lm(att_redist ~ cca, data = data_nl)
m1_nl_b = lm(att_redist ~ index_1 + index_2 + index_3, data = data_nl)
m2_nl_b = lm(att_redist ~ index_1 + index_2 + index_3 + cca, data = data_nl)
m3_nl_b = lm(att_redist ~ index_1 + index_2 + index_3 + cca + agegroups + sex + race + education + working + politics +
hhincome_groups + immigrant + marital + religion, data = data_nl)
corr_nl_0_index
cor_mi_nl_0
cor_mi_nl_1
abs_diff_us = nct_us$einv.real %>%
as.vector() %>%
abs() %>%
sum()
abs_diff_us
ega_us0$network
cor_us0_us1 = cor(c(as.matrix(ega_us0$network)), c(as.matrix(ega_us1$network)))
cor_us0_us1
abs_diff_us
typeof(ega_us0$network)
mean_edge_us = ega_us0$network %>%
as.vector() %>%
abs() %>%
mean()
mean_edge_us
abs_diff_us
as.vector(ega_us0$network)
mean_edge_us = ega_us0$network %>%
as.vector() %>%
na_if(0)
mean_edge_us
mean_edge_us = ega_us0$network %>%
as.vector() %>%
na_if(0) %>%
na.omit() %>%
abs() %>%
mean()
mean_edge_us
abs_diff_us = nct_us$einv.real %>%
as.vector() %>%
abs() %>%
sum()
abs_diff_us
mean_edge_us = ega_us0$network %>%
as.vector() %>%
na_if(0) %>%
na.omit() %>%
abs() %>%
mean()
mean_edge_us
mean_edge_us = ega_us1$network %>%
as.vector() %>%
na_if(0) %>%
na.omit() %>%
abs() %>%
mean()
mean_edge_us
abs_diff_nl = nct_nl$einv.real %>%
as.vector() %>%
abs() %>%
sum() #6.325021
abs_diff_nl
mean_edge_nl = ega_nl0$network %>%
as.vector() %>%
na_if(0) %>%
na.omit() %>%
abs() %>%
mean()
mean_edge_nl
mean_edge_nl = ega_nl1$network %>%
as.vector() %>%
na_if(0) %>%
na.omit() %>%
abs() %>%
mean()
mean_edge_nl
cor_nl0_nl1
ega_nl0$network
ega_nl1$network
cor_nl0_nl1 = cor(c(as.matrix(ega_nl0$network)), c(as.matrix(ega_nl1$network)))
cor_nl0_nl1
mat_clean_us0 = ega_us0$network %>%
as.vector() %>%
na_if(0) %>%
na.omit()
mat_clean_us0
mat_clean_us1 = ega_us0$network %>%
as.vector() %>%
na_if(0) %>%
na.omit()
mat_clean_us1
cor_us0_us1 = cor(mat_clean_us0, mat_clean_us1)
cor_us0_us1
#Signed matrices without 0s
mat_clean_us0 = ega_us0$network %>%
na_if(0)
mat_clean_us0
mat_clean_us0 = ega_us0$network %>%
na_if(0.000000000)
mat_clean_us0
mat_clean_us0 = ega_us0$network %>%
as.vector() %>%
na_if(0)
mat_clean_us0
length(mat_clean_us0)
mat_clean_us0 = ega_us1$network %>%
as.vector() %>%
na_if(0)
length(mat_clean_us0)
cor_us0_us1 = cor(mat_clean_us0,mat_clean_us1)
mat_clean_us0 = ega_us0$network %>%
as.vector() %>%
na_if(0) %>%
na.omit()
length(mat_clean_us0)
mat_clean_us0 = ega_us1$network %>%
as.vector() %>%
na_if(0) %>%
na.omit()
length(mat_clean_us0)
cor_us0_us1 = cor(mat_clean_us0, mat_clean_us1)
mat_clean_us0 = ega_us0$network %>%
as.vector() %>%
na_if(0)
length(mat_clean_us0)
mat_clean_us0 = ega_us1$network %>%
as.vector() %>%
na_if(0)
length(mat_clean_us0)
cor_us0_us1 = cor(mat_clean_us0, mat_clean_us1, use = "complete.obs" )
#Their cor
cor_us0_us1 = cor(mat_clean_us0, mat_clean_us1, use = complete.obs) #0.9318663
cor_us0_us1 = cor(mat_clean_us0, mat_clean_us1, use = "everything")
#Their cor
cor_us0_us1 = cor(mat_clean_us0, mat_clean_us1, use = "all.obs")
#Signed matrices without 0s
ega_us0$network
ega_us1$network
#Their cor
cor_us0_us1 = cor(c(as.matrix(ega_us0$network)), c(as.matrix(ega_us1$network))) #0.9318663
cor_us0_us1
cor_nl0_nl1
#US
set.seed(1)
nct_us = NCT(cca_us_0, cca_us_1,
gamma = 0.5, test.edges = TRUE, edges = "all",
test.centrality = TRUE, centrality = "strength")
inputNCTgraph_us <- ega_us0$network - ega_us1$network
inputNCTgraph_us[upper.tri(inputNCTgraph_us)][which(nct_us$einv.pvals$`p-value` >= .05)] <- 0
inputNCTgraph_us <- forceSymmetric(inputNCTgraph_us)
nct_us_plot = qgraph(inputNCTgraph_us,
#layout = "spring",
edge.labels = TRUE)
set.seed(1)
nct_nl = NCT(cca_nl_0, cca_nl_1,
gamma = 0.5, test.edges = TRUE, edges = "all",
test.centrality = TRUE, centrality = "strength")
inputNCTgraph_nl <- ega_nl0$network - ega_nl1$network
inputNCTgraph_nl[upper.tri(inputNCTgraph_nl)][which(nct_nl$einv.pvals$`p-value` >= .05)] <- 0
inputNCTgraph_nl <- forceSymmetric(inputNCTgraph_nl)
nct_nl_plot = qgraph(inputNCTgraph_nl,
#layout = "spring",
edge.labels = TRUE)
diff_nl_real = inputNCTgraph_nl %>%
as.vector() %>%
abs() %>%
sum()
diff_nl_real
diff_us_real = inputNCTgraph_us %>%
as.vector() %>%
abs() %>%
sum()
diff_us_real
